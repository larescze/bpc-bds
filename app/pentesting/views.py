from rest_framework.decorators import api_view
from rest_framework.response import Response
from querybuilder.query import Query
from django.db import connection, IntegrityError, transaction
from datetime import datetime

import collections
import json


@api_view(['GET', 'POST', 'PUT', 'DELETE'])
def projects(request, name=''):
    if request.method == 'GET':
        query = Query().from_table('bds.projects')
        data = query.select()
        return Response({'data': data})
    if request.method == 'POST':
        data = json.loads(request.body)
        with connection.cursor() as cursor:
            now = datetime.today()
            cursor.execute('''
                INSERT INTO bds.projects (slug, title, description, start_date, end_date, created_at, updated_at) 
                VALUES (%s, %s, %s, %s, %s, %s, %s);
                ''', [data["slug"], data["title"], data["description"], data["start_date"], data["end_date"], now, now])
        return Response({'success': True})
    if request.method == 'PUT':
        data = json.loads(request.body)
        with connection.cursor() as cursor:
            cursor.execute('''
                UPDATE bds.projects 
                SET slug = %s, title = %s, description = %s
                WHERE slug = %s''', [data["slug"], data["title"], data["description"], name])
        return Response({'success': True})
    if request.method == 'DELETE':
        if request.user.is_superuser:
            try:
                with transaction.atomic():
                    with connection.cursor() as cursor:
                        cursor.execute(
                            "SELECT id_project FROM bds.projects WHERE slug = %s", [name])
                        id = cursor.fetchone()[0]
                        cursor.execute('''
                            DELETE FROM bds.tasks
                            WHERE id_project = %s''', [id])
                        cursor.execute('''
                            DELETE FROM bds.projects
                            WHERE slug = %s''', [name])
                        return Response({'success': True})
            except IntegrityError:
                return Response({'success': False})
        else:
            return Response({'success': False})


@api_view(['GET'])
def project(request, name):
    if request.method == 'GET':
        with connection.cursor() as cursor:
            cursor.execute('''
                SELECT p.title AS project_title, p.start_date, p.end_date, p.description AS project_description, v.title AS vulnerablity_title, v.cve, v.description 
                FROM bds.projects AS p 
                JOIN bds.tasks AS t1 ON t1.id_project = p.id_project 
                JOIN bds.target2task AS t2t ON t2t.id_task = t1.id_task 
                JOIN bds.targets AS t2 ON t2.id_target = t2t.id_target 
                JOIN bds.vulnerability2target AS v2t ON v2t.id_target = t2.id_target 
                JOIN bds.vulnerabilities AS v ON v.id_vulnerability = v2t.id_vulnerability 
                WHERE p.slug = %s''', [name])
            rows = cursor.fetchall()
            rowarray_list = []
            for row in rows:
                t = (row[0], row[1], row[2], row[3], row[4], row[5], row[6])
                rowarray_list.append(t)
            objects_list = []
            title = ""
            description = ""
            duration = ""
            for row in rows:
                d = collections.OrderedDict()
                d["vulnerablity_title"] = row[4]
                d["cve"] = row[5]
                d["description"] = row[6]
                title = row[0]
                duration = row[1].strftime(
                    '%Y-%m-%d') + " - " + row[2].strftime('%Y-%m-%d')
                description = row[3]
                objects_list.append(d)
            data = objects_list
        return Response({'project': {'title': title, 'duration': duration, 'description': description}, 'data': data})


@api_view(['GET'])
def logs(request, limit):
    if request.method == 'GET':
        with connection.cursor() as cursor:
            cursor.execute('''
                SELECT log_event, timestamp 
                FROM bds.logs
                WHERE log_event LIKE = %''' + limit)
            rows = cursor.fetchall()
            rowarray_list = []
            for row in rows:
                t = (row[0], row[1])
                rowarray_list.append(t)
            objects_list = []
            for row in rows:
                d = collections.OrderedDict()
                d["log_event"] = row[0]
                d["timestamp"] = row[1]
                objects_list.append(d)
            data = objects_list
        return Response({'data': data})
